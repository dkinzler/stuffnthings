* what about testing?
    * we could e.g. create a GitHubApi interface that defines method to return the commands
        * we could have that as a field on Model
        * for testing we can use a mock or similar
        * this would be useful especially for interactive testing
* update readme
    * note there is still some polishing to do, but works well enough
* how to do a "progress report"
	* e.g. if you run a command like an external program that runs some time and u want to emit multiple messages from there?
		* is there an example for this? or somebody probably asked this before -> google




without TUI
* we could also add a command that does everything based on the config file automatically, like a script
* would need to refactor some of the command code, in particular those that run background commands, so that it can be used by 
    both terminal ui and script
* but that shouldn't be hard at all
* just need to think about what we output and log
    * just output on console, including external commands?
    * e.g. do we log everything to a file
    * what about command outputs like for a git clone command, print this or run in the background and only output if there is an error
        * yeah only outputting when there is an error is probably the way
* we could also do this with bubbletea but less fancy?
    * it is probably easiest to just do a script for now
    * how would the work flow even work, with the above we would probably have a single entrypoint function that calls out to others and runs commands and so on
        * because we have a model and program flow is driven 
* or is there another library more for that purpose?

how would we do that?
* move ui.go into ui package and current backup command into backupui and script one just into backup
* need code reuse
    * where things happen we need to split the action part from the command part, zipping, git clone etc.
        * also applies to exec.Background
        * that should be easy enough
        * and need to export these functions
    * we can use the same config structs
    * we basically just have a single file that does cli parsing and then runs a single function, the main one
        * that first checks config, if everything is there
        * then runs every module one by one, for each one a function
        * output everything to std
        * do we need prompts? yes e.g. to retry failed cloned operations
* we can maybe use some of the styling from lipgloss?

